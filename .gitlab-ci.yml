variables:
  REMOTE_HOST: deploy@172.16.7.123
  API_IMAGE: ${CI_REGISTRY_IMAGE}/api
  WEBAPP_IMAGE: ${CI_REGISTRY_IMAGE}/webapp

stages:
  - test
  - build
  - deploy

test:
  image: node:latest
  stage: test
  script:
    # Go to api directory
    - cd api
    # Run npm commands
    - npm install && npm test && npm audit
    # Go to webapp directory
    - cd ../webapp
    # Remove package-lock.json because of a bug
    # (https://stackoverflow.com/questions/63321707/react-npm-install-fails)
    - rm package-lock.json
    # Run npm commands
    - npm install && npm test && npm audit

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # Build & push API
    - docker build -f api/DockerfileServer -t "${API_IMAGE}" .
    - docker push "${API_IMAGE}"
    # Build & push Webapp
    - docker build -f webapp/DockerfileServer -t "${WEBAPP_IMAGE}" .
    - docker push "${WEBAPP_IMAGE}"

deploy:
  image: alpine:latest
  stage: deploy
  script:
    - apk update && apk add rsync openssh curl
    # Prepare SSH settings
    - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}" | base64 -d > ~/.ssh/id_rsa)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Prepare files for transfer
    - mkdir remote_dir
    - cp docker-compose.server.yml remote_dir/docker-compose.yml
    - echo "API_IMAGE=${API_IMAGE}" >> remote_dir/.env
    - echo "WEBAPP_IMAGE=${WEBAPP_IMAGE}" >> remote_dir/.env
    # Transfer to server
    - rsync -r remote_dir "${REMOTE_HOST}:./"
    # Run commands on the server
    - ssh ${REMOTE_HOST} /bin/bash 
            "
            echo 'Starting..';
            cd ~/remote_dir;
            docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY;
            docker-compose pull;
            docker-compose up -d;
            "

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
